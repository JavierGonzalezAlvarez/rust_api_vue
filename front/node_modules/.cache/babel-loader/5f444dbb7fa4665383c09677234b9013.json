{"remainingRequest":"/home/javier/Escritorio/Proyectos/rust/rust_vue/front/node_modules/babel-loader/lib/index.js!/home/javier/Escritorio/Proyectos/rust/rust_vue/front/node_modules/eslint-loader/index.js??ref--13-0!/home/javier/Escritorio/Proyectos/rust/rust_vue/front/src/components/usuario/Api.js","dependencies":[{"path":"/home/javier/Escritorio/Proyectos/rust/rust_vue/front/src/components/usuario/Api.js","mtime":1631549418325},{"path":"/home/javier/Escritorio/Proyectos/rust/rust_vue/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javier/Escritorio/Proyectos/rust/rust_vue/front/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/javier/Escritorio/Proyectos/rust/rust_vue/front/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2phdmllci9Fc2NyaXRvcmlvL1Byb3llY3Rvcy9ydXN0L3J1c3RfdnVlL2Zyb250L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9qYXZpZXIvRXNjcml0b3Jpby9Qcm95ZWN0b3MvcnVzdC9ydXN0X3Z1ZS9mcm9udC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9ob21lL2phdmllci9Fc2NyaXRvcmlvL1Byb3llY3Rvcy9ydXN0L3J1c3RfdnVlL2Zyb250L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7Cgp2YXIgQXBpID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBBcGkoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXBpKTsKCiAgICB0aGlzLlNFUlZFUl9VUkwgPSAnaHR0cDovLzEyNy4wLjAuMTo4MDgwLyc7CiAgfSAvL2dldCBhbGxfdXNlcnMKCgogIF9jcmVhdGVDbGFzcyhBcGksIFt7CiAgICBrZXk6ICJnZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUobm9tYnJlKSB7CiAgICAgICAgdmFyIGlkLAogICAgICAgICAgICB1cmwsCiAgICAgICAgICAgIHJlcywKICAgICAgICAgICAgaXRlbXMsCiAgICAgICAgICAgIF9hcmdzID0gYXJndW1lbnRzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlkID0gX2FyZ3MubGVuZ3RoID4gMSAmJiBfYXJnc1sxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3NbMV0gOiAtMTsKICAgICAgICAgICAgICAgIHVybCA9IHRoaXMuU0VSVkVSX1VSTCArIG5vbWJyZTsKCiAgICAgICAgICAgICAgICBpZiAoaWQgIT09IC0xKSB7CiAgICAgICAgICAgICAgICAgIHVybCArPSBpZCArICIvIjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygidXJsIGdldCA9PiAiLCB1cmwpOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2godXJsLCB7CiAgICAgICAgICAgICAgICAgIG1ldGhvZDogIkdFVCIsCiAgICAgICAgICAgICAgICAgIC8vbW9kZTogJ25vLWNvcnMnLAogICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgaXRlbXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coInJlc3B1ZXN0YSAwID0+IiwgaXRlbXMpOwoKICAgICAgICAgICAgICAgIGlmICghKGl0ZW1zLnJlc3VsdHMgPT09IHVuZGVmaW5lZCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygicmVzcHVlc3RhIDIgPT4iLCBpdGVtcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBpdGVtcyk7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygicmVzcHVlc3RhIDMgPT4iLCBpdGVtcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBpdGVtcy5yZXN1bHRzKTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXQoX3gpIHsKICAgICAgICByZXR1cm4gX2dldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZ2V0OwogICAgfSgpIC8vYWRkdXNlcgoKICB9LCB7CiAgICBrZXk6ICJwb3N0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcG9zdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIobm9tYnJlLCBvYmopIHsKICAgICAgICB2YXIgdXJsLCByZXMsIGRhdGE7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHVybCA9IHRoaXMuU0VSVkVSX1VSTCArIG5vbWJyZTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJ1cmwgcG9zdCA9PiAiLCB1cmwpOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKHVybCwgewogICAgICAgICAgICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkob2JqKSwKICAgICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKHJlcy5vaykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCByZXMuc3RhdHVzVGV4dCk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBkYXRhID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBwb3N0KF94MiwgX3gzKSB7CiAgICAgICAgcmV0dXJuIF9wb3N0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBwb3N0OwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gQXBpOwp9KCk7CgpleHBvcnQgeyBBcGkgYXMgZGVmYXVsdCB9Ow=="},{"version":3,"sources":["/home/javier/Escritorio/Proyectos/rust/rust_vue/front/src/components/usuario/Api.js"],"names":["Api","SERVER_URL","nombre","id","url","console","log","fetch","method","headers","res","json","items","results","undefined","obj","body","JSON","stringify","ok","statusText","data"],"mappings":";;;;;;IAAqBA,G;AACnB,iBAAc;AAAA;;AACZ,SAAKC,UAAL,GAAkB,wBAAlB;AACD,G,CAED;;;;;;yEACA,iBAAUC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBC,gBAAAA,EAAlB,2DAAuB,CAAC,CAAxB;AAEMC,gBAAAA,GAFN,GAEY,KAAKH,UAAL,GAAkBC,MAF9B;;AAGE,oBAAIC,EAAE,KAAK,CAAC,CAAZ,EAAe;AACbC,kBAAAA,GAAG,IAAID,EAAE,GAAG,GAAZ;AACD;;AAEDE,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,GAA3B;AAPF;AAAA,uBASoBG,KAAK,CAACH,GAAD,EAAM;AAC3BI,kBAAAA,MAAM,EAAE,KADmB;AAE3B;AACAC,kBAAAA,OAAO,EAAE;AACP,oCAAgB,kBADT;AAEP,mDAA+B;AAFxB;AAHkB,iBAAN,CATzB;;AAAA;AASQC,gBAAAA,GATR;AAAA;AAAA,uBAmBsBA,GAAG,CAACC,IAAJ,EAnBtB;;AAAA;AAmBQC,gBAAAA,KAnBR;AAoBEP,gBAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BM,KAA9B;;AApBF,sBAsBMA,KAAK,CAACC,OAAN,KAAkBC,SAtBxB;AAAA;AAAA;AAAA;;AAuBIT,gBAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BM,KAA9B;AAvBJ,iDAwBWA,KAxBX;;AAAA;AA2BEP,gBAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BM,KAA9B;AA3BF,iDA4BSA,KAAK,CAACC,OA5Bf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QA+BA;;;;;0EACA,kBAAWX,MAAX,EAAmBa,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEMX,gBAAAA,GAFN,GAEY,KAAKH,UAAL,GAAkBC,MAF9B;AAIEG,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AAJF;AAAA,uBAMoBG,KAAK,CAACH,GAAD,EAAM;AAC3BI,kBAAAA,MAAM,EAAE,MADmB;AAE3BQ,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,GAAf,CAFqB;AAG3BN,kBAAAA,OAAO,EAAE;AACP,oCAAgB,kBADT;AAEP,mDAA+B;AAFxB;AAHkB,iBAAN,CANzB;;AAAA;AAMQC,gBAAAA,GANR;;AAAA,oBAeOA,GAAG,CAACS,EAfX;AAAA;AAAA;AAAA;;AAAA,kDAgBWT,GAAG,CAACU,UAhBf;;AAAA;AAAA;AAAA,uBAmBqBV,GAAG,CAACC,IAAJ,EAnBrB;;AAAA;AAmBQU,gBAAAA,IAnBR;AAAA,kDAoBSA,IApBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;SAtCmBrB,G","sourcesContent":["export default class Api {\n  constructor() {\n    this.SERVER_URL = 'http://127.0.0.1:8080/'\n  }\n\n  //get all_users\n  async get(nombre, id = -1) {\n\n    let url = this.SERVER_URL + nombre;\n    if (id !== -1) {\n      url += id + \"/\"\n    }\n\n    console.log(\"url get => \", url)\n\n    const res = await fetch(url, {\n      method: \"GET\",\n      //mode: 'no-cors',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      }\n\n    });\n\n    const items = await res.json();\n    console.log(\"respuesta 0 =>\", items);\n\n    if (items.results === undefined) {\n      console.log(\"respuesta 2 =>\", items);\n      return items\n    }\n\n    console.log(\"respuesta 3 =>\", items);\n    return items.results;\n  }\n\n  //adduser\n  async post(nombre, obj) {\n\n    let url = this.SERVER_URL + nombre;\n\n    console.log(\"url post => \", url)\n\n    const res = await fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(obj),\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      }\n    });\n\n    if (!res.ok) {\n      return res.statusText;\n    }\n\n    const data = await res.json();\n    return data;\n  }\n\n\n\n\n}\n"]}]}